Bugfixes and enhancements:

  - "Displays" button should only allow displays that can properly display the
    data. So, if the data transform is 3D only, only 3D displays should be
    enabled, etc.

  - Data transforms must have a "destroy" method that is called when they are
    deleted, so that (e.g.) their GUI controls do not remain in memory.

  - Data transforms have an event they generate when their parameters change.
    Children transforms must listen to this event and react to it.
    Also update HTML description panel when data transform's parameters change.

  - Flag indicating whether latest state change should "stack up" or "replace"
    last change (if last change was of the same type as this one)

  - Change color dialog to include more alpha tools.
  - Add transparency controls to left side of color dialog box.

  - Change each data object to have its own MathType for better color controls.
    Unique RealTypes of the form x1, x2, x3, ..., y1, y2, y3, ...,
    rgba1_1, rgba1_2, rgba1_3, ..., rgba2_1, rgba2_2, rgba2_3, ...
    This ensures that every dataset has unique RealTypes, for independent
    color and spatial controls.

    This will also allow the getSuggestedMaps method to be eliminated, since
    what should be mapped is obvious from the type names. However, it requires
    all data transforms to return data with MathTypes containing RealTypes of
    the standard form. Each created DataTransform has a unique ID number that
    is used for choosing the RealType names.

  - Make Up and Down buttons in display window's controls actually work.

  - Command+? Macintosh Help shortcut does not function.

  - Set "Window Modified Indicator" when content has changed since last save?

  - Use java.awt.FileDialog on Mac OS X?

  - Add -Dsun.java2d.opengl=true to options, and add option to toggle it
    (Java 1.5+ only)

  - Fix bug in many file readers where ImageLine is numbered upside down so
    that VisAD displays the image right side up. The numbering should be
    normal, not an upside down Linear2DSet, and then the range should be set
    in the display so that the image is displayed properly anyway. This way,
    using the VisAD cursor actually returns the proper results.

    If this breaks VisAD too much (probably would), then just have VisBio flip
    the domain sets of all images that get read in, so that the cursor is
    correct.

  - Separate OME upload logic into separate static utility method, with a given
    output stream for displaying the progress. Create a command-line upload
    utility for use doing generic client-side uploads. Put all of this into the
    loci.ome package. The only issue is how/whether to handle various file
    formats. Well, we can handle them easily if this command line utility is
    simply packaged with VisBio, since visad.jar will be available then.
